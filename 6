#include<stdio.h>
#include<time.h> 
#define INFINITY 999

int min(int i, int j) {
    if(i < j)
        return i;
    else
        return j;
}

void floyd(int n, int p[10][10]) {
    int i, j, k;
    for(k = 1; k <= n; k++) {
        #pragma omp parallel for private(i, j) shared(p)
        for(i = 1; i <= n; i++) {
            for(j = 1; j <= n; j++) {
                p[i][j] = min(p[i][j], p[i][k] + p[k][j]);
            }
        }
    }
}

int main() {
    int i, j, n, a[10][10];
    clock_t starttime, endtime; 

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    printf("\nEnter the adjacency matrix\n");
    for(i = 1; i <= n; i++) {
        for(j = 1; j <= n; j++) {
            scanf("%d", &a[i][j]);
        }
    }

    starttime = clock();
    floyd(n, a);
    endtime = clock(); 

    printf("\n\nThe distance matrix is \n");
    for(i = 1; i <= n; i++) {
        for(j = 1; j <= n; j++) {
            printf("%d\t", a[i][j]);
        }
        printf("\n");
    }

    double timetaken = ((double)(endtime - starttime)) / CLOCKS_PER_SEC;
    printf("\n\nThe time taken is %lf seconds\n", timetaken);

    return 0;
}

